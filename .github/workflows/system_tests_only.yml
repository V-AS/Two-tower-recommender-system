# .github/workflows/system_tests_only.yml
name: System Tests Only (No Training)

on:
  workflow_dispatch:  # Allow manual triggering

jobs:
  run-all-system-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch==2.6.0
          pip install numpy pandas faiss-cpu pytest pytest-cov scikit-learn tqdm matplotlib coverage
      
      # SYSTEM TEST 1: Data Validation
      - name: Run System Test 1 - Dataset Validation
        id: validation
        run: |
          echo "Running System Test 1: Dataset Validation..."
          python tests/system/test_data_validation.py data/processed/recommender_data.csv
        continue-on-error: false  # Fail the workflow if validation fails
      
      # Generate coverage for test 1
      - name: Generate Coverage Data for System Test 1
        run: |
          python -m pytest tests/system/test_data_validation.py --cov=src --cov-report=xml:validation-coverage.xml
      
      # Verify that trained models exist before continuing
      - name: Check for existing trained models
        id: check-models
        run: |
          echo "Checking for existing trained models in output directory..."
          if [ -f "output/user_model.pth" ] && [ -f "output/item_model.pth" ] && [ -f "output/item_embeddings.npy" ]; then
            echo "Found existing trained models, continuing with tests!"
          else
            echo "ERROR: Required model files not found in output directory."
            echo "Please run the training workflow first, or check that models are in the correct location."
            echo "Expected files in output/: user_model.pth, item_model.pth, item_embeddings.npy"
            ls -la output/ || echo "Output directory doesn't exist"
            exit 1
          fi
      
      # SYSTEM TEST 2: Model Convergence (using existing models)
      - name: Run System Test 2 - Model Convergence
        id: convergence
        run: |
          echo "Running System Test 2: Model Convergence..."
          python tests/system/test_model_convergence.py output
      
      # Generate coverage for test 2
      - name: Generate Coverage Data for System Test 2
        run: |
          python -m pytest tests/system/test_model_convergence.py --cov=src --cov-report=xml:convergence-coverage.xml
      
      # SYSTEM TEST 3: Model Storage
      - name: Run System Test 3 - Model Storage
        id: storage
        run: |
          echo "Running System Test 3: Model Storage..."
          # Run with pytest instead of direct script execution
          python -m pytest tests/system/test_model_storage.py -v
      
      # Generate coverage for test 3
      - name: Generate Coverage Data for System Test 3
        run: |
          python -m pytest tests/system/test_model_storage.py --cov=src --cov-report=xml:storage-coverage.xml
      
      # Merge Coverage Reports
      - name: Merge Coverage Reports
        run: |
          echo "Merging coverage data from all system tests..."
          # Merge the coverage files
          coverage combine validation-coverage.xml convergence-coverage.xml storage-coverage.xml
          # Create final reports
          coverage xml -o coverage.xml
          coverage html
      
      - name: Upload XML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: system-test-coverage-xml
          path: coverage.xml
          retention-days: 30
      
      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: system-test-coverage-html
          path: htmlcov/
          retention-days: 30
      
      - name: Generate coverage summary
        run: |
          echo "## System Test Coverage Summary" > coverage_summary.md
          python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          coverage = root.get('line-rate')
          coverage_pct = float(coverage) * 100
          print(f'Overall coverage: {coverage_pct:.2f}%', file=open('coverage_summary.md', 'a'))
          
          # Print module-level coverage
          print('\n| Module | Coverage |', file=open('coverage_summary.md', 'a'))
          print('|--------|----------|', file=open('coverage_summary.md', 'a'))
          for package in root.findall('.//package'):
              name = package.get('name')
              cov = float(package.get('line-rate')) * 100
              print(f'| {name} | {cov:.2f}% |', file=open('coverage_summary.md', 'a'))
          "
      
      - name: Upload coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: system-test-coverage-summary
          path: coverage_summary.md
          retention-days: 30